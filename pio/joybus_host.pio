.program joybus_host

; Joybus is a 1 wire, single device protocol where a host and device take turns
; sending data over a single line. Hosts send an 8 bit + 1 stop command to a devices,
; switch the data line to an input, then listen for a (typically) 24-32 bit + 1 stop
; response from the device.
;
; Electrically, the data line is pulled high to 3.3v thru a ~1k ohm resistor in the device.
; The device and host take turns grounding and releasing the line to produce
; pulses 1, 2, or 3 microseconds long.
;
; This program assumes a PIO clock of 8 MHz (clock divide = 15.625 on RP2040 )
; This lets us fit 8 instructions inside a 1us pulse, while still being able
; to represent a 3us pulse with a 24 cycle delay (representable in 5 bits, the
; most the PIO hardware can delay on one instruction)
;
; Below are the waveforms for sending/receiving bits and stops.
; Numbers are microseconds (us)
;
;              ──┆┐  3  ┌─┆────────
;    Bit Zero:   ┆└─────┘1┆ release
;
;              ──┆┐1┌─────┆────────
;     Bit One:   ┆└─┘  3  ┆ release
;
;              ──┆┐1┌───┆──────────
;   Host Stop:   ┆└─┘ 2 ┆   release
;
;              ──┆┐ 2 ┌───┆────────
; Device Stop:   ┆└───┘ 2 ┆ release
;
; The host sends one style of stop while devices send a different style.
; This is fortunate because the device style can be distinguished easily
; from a bit 0, and device replies have variable length.
;
; Joybus reference: https://n64brew.dev/wiki/Joybus_Protocol
;
; USAGE NOTES: 
; autopull = true, autopush = true
; pull_threshold = 8, push_threshold = 8
; Sent data is bitwise inverted on the CPU because PINDIRS
; logic is inverted (1 pulls low)

.wrap_target
send_size:
    OUT X 32 ; Get the number of command bits to send

send_loop:
    SET PINDIRS, 1 [7]  ; Every waveform starts low for 1us
    OUT PINDIRS, 1 [15] ; Let a bit from the OSR take over for 2us
    SET PINDIRS, 0 [6]  ; Return high for 1us
    JMP X-- send_loop   ; Breaks out after sending the last bit

send_stop:
    SET PINDIRS, 1 [7]  ; Low for 1us
    SET PINDIRS, 0      ; High for 2us (we just set and forget though)

rec_size:
    OUT X 32 ; Get the number of bits to recieve

rec_loop:
    WAIT 0 PIN 0 [15]   ; Wait for falling edge, then delay 2 uS
    IN PINS 1 [10]      ; Read the bit, then delay 1.5us
    JMP X-- rec_loop    ; There's 0.5us of high in this bit still
                        ; but it's ok, we'll wait at the top of the loop
rec_stop:
    WAIT 0 PIN 0 [15]  ; wait for falling edge, then delay 2us
    WAIT 1 PIN 0 [15]  ; wait for rising edge, then delay 2us to finish the stop
                       ; now it's safe to loop
.wrap