.program joybus_host

; Joybus is a 1 wire, single device protocol where a host and device take turns
; sending data over a single line. Hosts send an 8 bit + 1 stop command to a devices,
; switch the data line to an input, then listen for a (typically) 24-32 bit + 1 stop
; response from the device.
;
; Electrically, the data line is pulled high to 3.3v thru a ~1k ohm resistor in the device.
; The device and host take turns grounding and releasing the line to produce
; pulses 1, 2, or 3 microseconds long.
;
; This program assumes a PIO clock of 8 MHz (clock divide = 15.625 on RP2040 )
; This lets us fit 8 instructions inside a 1us pulse, while still being able
; to represent a 3us pulse with a 24 cycle delay (representable in 5 bits, the
; most the PIO hardware can delay on one instruction)
;
; Below are the waveforms for sending/receiving bits and stops.
; Numbers are microseconds (us)
;
;              ──┆┐  3  ┌─┆────────
;    Bit Zero:   ┆└─────┘1┆ release
;
;              ──┆┐1┌─────┆────────
;     Bit One:   ┆└─┘  3  ┆ release
;
;              ──┆┐1┌───┆──────────
;   Host Stop:   ┆└─┘ 2 ┆   release
;
;              ──┆┐ 2 ┌───┆────────
; Device Stop:   ┆└───┘ 2 ┆ release
;
; The host sends one style of stop while devices send a different style.
; This is fortunate because the device style can be distinguished easily
; from a bit 0, and device replies have variable length.
;
; Joybus reference: https://n64brew.dev/wiki/Joybus_Protocol
;
; USAGE NOTES: 
; autopull = FALSE, autopush = FALSE
; pull_threshold = 32, push_threshold = 32
; Commands are bitwise inverted before send because PINDIRS
; logic is inverted from the data being sent.

.wrap_target
entry:
    SET Y 31            ; Used for comparison later, never changes
    SET X 7             ; Setup a counter for sent bits
    PULL                ; Wait until a command comes in
    
send_loop:
    SET PINDIRS, 1 [7]  ; Every waveform starts low for 1us
    OUT PINDIRS, 1 [15] ; Let a bit from the OSR take over for 2us
    SET PINDIRS, 0 [6]  ; Return high for 1us
    JMP X-- send_loop   ; Breaks out after sending the 8th bit

send_stop:
    SET PINDIRS, 1 [7]  ; Low for 1us
    SET PINDIRS, 0      ; High for 2us (we just set and forget though)
    SET X 31            ; Setup a counter for recieved bits

rec_loop:
    WAIT 0 PIN 0 [11]   ; Wait for falling edge, then delay 1.5 uS
    JMP PIN rec_data    ; low = zero or stop, high = one

rec_zero_or_stop:
    NOP [6]             ; wait 1us and sample again
    JMP PIN rec_stop    ; low = zero, high = stop

rec_data:
    IN PINS 1
    JMP X-- wait_for_data_end
    PUSH
    SET X 31

wait_for_data_end:
    WAIT 1 PIN 0        ; Wait for a logical high here to be sure the send has ended
    JMP rec_loop [3]    ; Wait 0.5us after high for stability

rec_stop:
    ; There is 0.5us left in the stop pattern on jump here
    ; Push if X != 31
    JMP X!=Y send_partial_word
    JMP entry

send_partial_word:
    PUSH
.wrap