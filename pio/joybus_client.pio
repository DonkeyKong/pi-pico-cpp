.program joybus_client

; See joybus_host for more information about the joybus protocol
;
;              ──┆┐  3  ┌─┆────────
;    Bit Zero:   ┆└─────┘1┆ release
;
;              ──┆┐1┌─────┆────────
;     Bit One:   ┆└─┘  3  ┆ release
;
;              ──┆┐1┌───┆──────────
;   Host Stop:   ┆└─┘ 2 ┆   release
;
;              ──┆┐ 2 ┌───┆────────
; Device Stop:   ┆└───┘ 2 ┆ release
;

.wrap_target
rec_cmd_size:
    SET X 7

rec_cmd_loop:
    WAIT 0 PIN 0 [11]     ; Wait for a falling edge, then delay 1.5 us
    IN PINS 1 [11]        ; Read in one bit and delay another 1.5 us
    JMP X-- rec_cmd_loop  ; Loop for 8 bits

rec_data_size:
    OUT X 32              ; CPU should push the number of bits to read for the command
    JMP !X rec_stop

rec_data_loop:
    WAIT 0 PIN 0 [11]
    IN PINS 1 [11]
    JMP X-- rec_data_loop

rec_stop:
    WAIT 0 PIN 0 [3]
    WAIT 1 PIN 0

send_size:
    OUT X 32 [15]     ; CPU should push the number of bits to write to respond
    
send_loop:
    SET PINDIRS, 1 [7]  ; Every waveform starts low for 1us
    OUT PINDIRS, 1 [15] ; Let a bit from the OSR take over for 2us
    SET PINDIRS, 0 [6]  ; Return high for 1us
    JMP X-- send_loop   ; Breaks out after sending the last bit

send_stop:
    SET PINDIRS, 1 [15]  ; Low for 2us
    SET PINDIRS, 0       ; High for 2us (we just set and forget though)
.wrap