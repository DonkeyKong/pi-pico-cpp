.program joybus_host_legacy

; Joybus reference:
; https://n64brew.dev/wiki/Joybus_Protocol

; Repeatedly get one word of data from the TX FIFO, stalling when the FIFO is
; empty. Write the least significant bit to the OUT pin group.

; 1 NOP is 0.125uS

entry:
    SET PINS, 0 ; Set all pins low

prepare_to_send:
    ; Pull the command from the c program
    PULL [18]
    ; Prepare to write 8 bits
    SET Y, 7

send_loop:
    ; Move 1 bit to send to X and jump to the high or low pattern segment
    OUT X, 1
    JMP !X send_0

send_1:
    SET PINDIRS, 1 [7] ; send low for 8
    SET PINDIRS, 0 [20] ; send high for 24 (21 here + 3 more before next edge)
    JMP Y-- send_loop
    JMP send_stop [1]

send_0:
    SET PINDIRS, 1 [23] ; setting pindirs to output will cause it to be pulled low
    SET PINDIRS, 0 [4]  ; setting to input will make it get pulled high
    JMP Y-- send_loop
    JMP send_stop [1]

send_stop:
    SET PINDIRS, 1 [7]
    SET PINDIRS, 0  ; no need to dwell, we can just get ready to recieve right away

prepare_to_receive:
    SET Y, 31

receive_loop:
    ; wait for bus high
    WAIT 1 PIN 0

    ; Wait for falling edge, then delay 1.5 uS
    WAIT 0 PIN 0 [11]

    ; Sample the signal and wait another 1.0 uS
    MOV X PINS [6]
    JMP !X maybe_stop  ; if low, this might be a stop bit
    JMP rec_data       ; else it's data

maybe_stop:
    JMP PIN rec_stop ; If the pin state is changed to 1, this was a stop

rec_data:
    IN X, 1
    JMP Y-- receive_loop ; decrement the bytes to read and loop if not zero
    PUSH ; move data from input shift register to recieve fifo
    JMP prepare_to_receive

rec_stop:
    ; if Y != 31 then there's data in the ISR and we need to PUSH
    SET X, 31
    JMP X!=Y rec_stop_push
    JMP prepare_to_send [24]

rec_stop_push:
    PUSH
    JMP prepare_to_send [24]
